/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  timestamp,
  serial,
  numeric,
  boolean,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_equipment_status = pgEnum('enum_equipment_status', [
  'available',
  'maintenance',
  'unavailable',
  'out_of_order',
])
export const enum_site_images_slug = pgEnum('enum_site_images_slug', ['capa', 'contra-capa'])

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_card_url: varchar('sizes_card_url'),
    sizes_card_width: numeric('sizes_card_width'),
    sizes_card_height: numeric('sizes_card_height'),
    sizes_card_mimeType: varchar('sizes_card_mime_type'),
    sizes_card_filesize: numeric('sizes_card_filesize'),
    sizes_card_filename: varchar('sizes_card_filename'),
    sizes_tablet_url: varchar('sizes_tablet_url'),
    sizes_tablet_width: numeric('sizes_tablet_width'),
    sizes_tablet_height: numeric('sizes_tablet_height'),
    sizes_tablet_mimeType: varchar('sizes_tablet_mime_type'),
    sizes_tablet_filesize: numeric('sizes_tablet_filesize'),
    sizes_tablet_filename: varchar('sizes_tablet_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_card_sizes_card_filename_idx: index('media_sizes_card_sizes_card_filename_idx').on(
      columns.sizes_card_filename,
    ),
    media_sizes_tablet_sizes_tablet_filename_idx: index(
      'media_sizes_tablet_sizes_tablet_filename_idx',
    ).on(columns.sizes_tablet_filename),
  }),
)

export const news_content = pgTable(
  'news_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    paragraph: varchar('paragraph'),
  },
  (columns) => ({
    _orderIdx: index('news_content_order_idx').on(columns._order),
    _parentIDIdx: index('news_content_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [news.id],
      name: 'news_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const news = pgTable(
  'news',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description').notNull(),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    type: integer('type_id')
      .notNull()
      .references(() => tipo_noticia.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    news_image_idx: index('news_image_idx').on(columns.image),
    news_type_idx: index('news_type_idx').on(columns.type),
    news_updated_at_idx: index('news_updated_at_idx').on(columns.updatedAt),
    news_created_at_idx: index('news_created_at_idx').on(columns.createdAt),
  }),
)

export const projects_technologies = pgTable(
  'projects_technologies',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    technology: varchar('technology'),
  },
  (columns) => ({
    _orderIdx: index('projects_technologies_order_idx').on(columns._order),
    _parentIDIdx: index('projects_technologies_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_technologies_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects_long_description = pgTable(
  'projects_long_description',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    paragraph: varchar('paragraph'),
  },
  (columns) => ({
    _orderIdx: index('projects_long_description_order_idx').on(columns._order),
    _parentIDIdx: index('projects_long_description_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_long_description_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects_features = pgTable(
  'projects_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    feature: varchar('feature'),
  },
  (columns) => ({
    _orderIdx: index('projects_features_order_idx').on(columns._order),
    _parentIDIdx: index('projects_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects_team = pgTable(
  'projects_team',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    member: varchar('member'),
  },
  (columns) => ({
    _orderIdx: index('projects_team_order_idx').on(columns._order),
    _parentIDIdx: index('projects_team_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [projects.id],
      name: 'projects_team_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const projects = pgTable(
  'projects',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    category: integer('category_id')
      .notNull()
      .references(() => categoria_projeto.id, {
        onDelete: 'set null',
      }),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    description: varchar('description').notNull(),
    startDate: timestamp('start_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    endDate: timestamp('end_date', { mode: 'string', withTimezone: true, precision: 3 }),
    repository: varchar('repository'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    projects_category_idx: index('projects_category_idx').on(columns.category),
    projects_image_idx: index('projects_image_idx').on(columns.image),
    projects_updated_at_idx: index('projects_updated_at_idx').on(columns.updatedAt),
    projects_created_at_idx: index('projects_created_at_idx').on(columns.createdAt),
  }),
)

export const team_skills = pgTable(
  'team_skills',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    skill: varchar('skill'),
  },
  (columns) => ({
    _orderIdx: index('team_skills_order_idx').on(columns._order),
    _parentIDIdx: index('team_skills_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [team.id],
      name: 'team_skills_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const team = pgTable(
  'team',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    role: integer('role_id')
      .notNull()
      .references(() => role.id, {
        onDelete: 'set null',
      }),
    description: varchar('description'),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    email: varchar('email'),
    linkedin: varchar('linkedin'),
    github: varchar('github'),
    lattes: varchar('lattes'),
    isActive: boolean('is_active').default(true),
    order: numeric('order').default('0'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    team_role_idx: index('team_role_idx').on(columns.role),
    team_image_idx: index('team_image_idx').on(columns.image),
    team_updated_at_idx: index('team_updated_at_idx').on(columns.updatedAt),
    team_created_at_idx: index('team_created_at_idx').on(columns.createdAt),
  }),
)

export const equipment = pgTable(
  'equipment',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    brand: varchar('brand').notNull(),
    model: varchar('model').notNull(),
    acquisitionYear: timestamp('acquisition_year', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    code: varchar('code').notNull(),
    status: enum_equipment_status('status').notNull().default('available'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    equipment_code_idx: uniqueIndex('equipment_code_idx').on(columns.code),
    equipment_updated_at_idx: index('equipment_updated_at_idx').on(columns.updatedAt),
    equipment_created_at_idx: index('equipment_created_at_idx').on(columns.createdAt),
  }),
)

export const site_images = pgTable(
  'site_images',
  {
    id: serial('id').primaryKey(),
    slug: enum_site_images_slug('slug').notNull(),
    description: varchar('description'),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    site_images_slug_idx: uniqueIndex('site_images_slug_idx').on(columns.slug),
    site_images_image_idx: index('site_images_image_idx').on(columns.image),
    site_images_updated_at_idx: index('site_images_updated_at_idx').on(columns.updatedAt),
    site_images_created_at_idx: index('site_images_created_at_idx').on(columns.createdAt),
  }),
)

export const tipo_noticia = pgTable(
  'tipo_noticia',
  {
    id: serial('id').primaryKey(),
    nome: varchar('nome').notNull(),
    descricao: varchar('descricao'),
    ativo: boolean('ativo').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tipo_noticia_updated_at_idx: index('tipo_noticia_updated_at_idx').on(columns.updatedAt),
    tipo_noticia_created_at_idx: index('tipo_noticia_created_at_idx').on(columns.createdAt),
  }),
)

export const categoria_projeto = pgTable(
  'categoria_projeto',
  {
    id: serial('id').primaryKey(),
    nome: varchar('nome').notNull(),
    descricao: varchar('descricao'),
    ativo: boolean('ativo').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categoria_projeto_updated_at_idx: index('categoria_projeto_updated_at_idx').on(
      columns.updatedAt,
    ),
    categoria_projeto_created_at_idx: index('categoria_projeto_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const role = pgTable(
  'role',
  {
    id: serial('id').primaryKey(),
    nome: varchar('nome').notNull(),
    descricao: varchar('descricao'),
    ativo: boolean('ativo').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    role_updated_at_idx: index('role_updated_at_idx').on(columns.updatedAt),
    role_created_at_idx: index('role_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    newsID: integer('news_id'),
    projectsID: integer('projects_id'),
    teamID: integer('team_id'),
    equipmentID: integer('equipment_id'),
    'site-imagesID': integer('site_images_id'),
    'tipo-noticiaID': integer('tipo_noticia_id'),
    'categoria-projetoID': integer('categoria_projeto_id'),
    roleID: integer('role_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_news_id_idx: index(
      'payload_locked_documents_rels_news_id_idx',
    ).on(columns.newsID),
    payload_locked_documents_rels_projects_id_idx: index(
      'payload_locked_documents_rels_projects_id_idx',
    ).on(columns.projectsID),
    payload_locked_documents_rels_team_id_idx: index(
      'payload_locked_documents_rels_team_id_idx',
    ).on(columns.teamID),
    payload_locked_documents_rels_equipment_id_idx: index(
      'payload_locked_documents_rels_equipment_id_idx',
    ).on(columns.equipmentID),
    payload_locked_documents_rels_site_images_id_idx: index(
      'payload_locked_documents_rels_site_images_id_idx',
    ).on(columns['site-imagesID']),
    payload_locked_documents_rels_tipo_noticia_id_idx: index(
      'payload_locked_documents_rels_tipo_noticia_id_idx',
    ).on(columns['tipo-noticiaID']),
    payload_locked_documents_rels_categoria_projeto_id_idx: index(
      'payload_locked_documents_rels_categoria_projeto_id_idx',
    ).on(columns['categoria-projetoID']),
    payload_locked_documents_rels_role_id_idx: index(
      'payload_locked_documents_rels_role_id_idx',
    ).on(columns.roleID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    newsIdFk: foreignKey({
      columns: [columns['newsID']],
      foreignColumns: [news.id],
      name: 'payload_locked_documents_rels_news_fk',
    }).onDelete('cascade'),
    projectsIdFk: foreignKey({
      columns: [columns['projectsID']],
      foreignColumns: [projects.id],
      name: 'payload_locked_documents_rels_projects_fk',
    }).onDelete('cascade'),
    teamIdFk: foreignKey({
      columns: [columns['teamID']],
      foreignColumns: [team.id],
      name: 'payload_locked_documents_rels_team_fk',
    }).onDelete('cascade'),
    equipmentIdFk: foreignKey({
      columns: [columns['equipmentID']],
      foreignColumns: [equipment.id],
      name: 'payload_locked_documents_rels_equipment_fk',
    }).onDelete('cascade'),
    'site-imagesIdFk': foreignKey({
      columns: [columns['site-imagesID']],
      foreignColumns: [site_images.id],
      name: 'payload_locked_documents_rels_site_images_fk',
    }).onDelete('cascade'),
    'tipo-noticiaIdFk': foreignKey({
      columns: [columns['tipo-noticiaID']],
      foreignColumns: [tipo_noticia.id],
      name: 'payload_locked_documents_rels_tipo_noticia_fk',
    }).onDelete('cascade'),
    'categoria-projetoIdFk': foreignKey({
      columns: [columns['categoria-projetoID']],
      foreignColumns: [categoria_projeto.id],
      name: 'payload_locked_documents_rels_categoria_projeto_fk',
    }).onDelete('cascade'),
    roleIdFk: foreignKey({
      columns: [columns['roleID']],
      foreignColumns: [role.id],
      name: 'payload_locked_documents_rels_role_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_news_content = relations(news_content, ({ one }) => ({
  _parentID: one(news, {
    fields: [news_content._parentID],
    references: [news.id],
    relationName: 'content',
  }),
}))
export const relations_news = relations(news, ({ one, many }) => ({
  content: many(news_content, {
    relationName: 'content',
  }),
  image: one(media, {
    fields: [news.image],
    references: [media.id],
    relationName: 'image',
  }),
  type: one(tipo_noticia, {
    fields: [news.type],
    references: [tipo_noticia.id],
    relationName: 'type',
  }),
}))
export const relations_projects_technologies = relations(projects_technologies, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_technologies._parentID],
    references: [projects.id],
    relationName: 'technologies',
  }),
}))
export const relations_projects_long_description = relations(
  projects_long_description,
  ({ one }) => ({
    _parentID: one(projects, {
      fields: [projects_long_description._parentID],
      references: [projects.id],
      relationName: 'longDescription',
    }),
  }),
)
export const relations_projects_features = relations(projects_features, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_features._parentID],
    references: [projects.id],
    relationName: 'features',
  }),
}))
export const relations_projects_team = relations(projects_team, ({ one }) => ({
  _parentID: one(projects, {
    fields: [projects_team._parentID],
    references: [projects.id],
    relationName: 'team',
  }),
}))
export const relations_projects = relations(projects, ({ one, many }) => ({
  category: one(categoria_projeto, {
    fields: [projects.category],
    references: [categoria_projeto.id],
    relationName: 'category',
  }),
  image: one(media, {
    fields: [projects.image],
    references: [media.id],
    relationName: 'image',
  }),
  technologies: many(projects_technologies, {
    relationName: 'technologies',
  }),
  longDescription: many(projects_long_description, {
    relationName: 'longDescription',
  }),
  features: many(projects_features, {
    relationName: 'features',
  }),
  team: many(projects_team, {
    relationName: 'team',
  }),
}))
export const relations_team_skills = relations(team_skills, ({ one }) => ({
  _parentID: one(team, {
    fields: [team_skills._parentID],
    references: [team.id],
    relationName: 'skills',
  }),
}))
export const relations_team = relations(team, ({ one, many }) => ({
  role: one(role, {
    fields: [team.role],
    references: [role.id],
    relationName: 'role',
  }),
  image: one(media, {
    fields: [team.image],
    references: [media.id],
    relationName: 'image',
  }),
  skills: many(team_skills, {
    relationName: 'skills',
  }),
}))
export const relations_equipment = relations(equipment, () => ({}))
export const relations_site_images = relations(site_images, ({ one }) => ({
  image: one(media, {
    fields: [site_images.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_tipo_noticia = relations(tipo_noticia, () => ({}))
export const relations_categoria_projeto = relations(categoria_projeto, () => ({}))
export const relations_role = relations(role, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    newsID: one(news, {
      fields: [payload_locked_documents_rels.newsID],
      references: [news.id],
      relationName: 'news',
    }),
    projectsID: one(projects, {
      fields: [payload_locked_documents_rels.projectsID],
      references: [projects.id],
      relationName: 'projects',
    }),
    teamID: one(team, {
      fields: [payload_locked_documents_rels.teamID],
      references: [team.id],
      relationName: 'team',
    }),
    equipmentID: one(equipment, {
      fields: [payload_locked_documents_rels.equipmentID],
      references: [equipment.id],
      relationName: 'equipment',
    }),
    'site-imagesID': one(site_images, {
      fields: [payload_locked_documents_rels['site-imagesID']],
      references: [site_images.id],
      relationName: 'site-images',
    }),
    'tipo-noticiaID': one(tipo_noticia, {
      fields: [payload_locked_documents_rels['tipo-noticiaID']],
      references: [tipo_noticia.id],
      relationName: 'tipo-noticia',
    }),
    'categoria-projetoID': one(categoria_projeto, {
      fields: [payload_locked_documents_rels['categoria-projetoID']],
      references: [categoria_projeto.id],
      relationName: 'categoria-projeto',
    }),
    roleID: one(role, {
      fields: [payload_locked_documents_rels.roleID],
      references: [role.id],
      relationName: 'role',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_equipment_status: typeof enum_equipment_status
  enum_site_images_slug: typeof enum_site_images_slug
  users_sessions: typeof users_sessions
  users: typeof users
  media: typeof media
  news_content: typeof news_content
  news: typeof news
  projects_technologies: typeof projects_technologies
  projects_long_description: typeof projects_long_description
  projects_features: typeof projects_features
  projects_team: typeof projects_team
  projects: typeof projects
  team_skills: typeof team_skills
  team: typeof team
  equipment: typeof equipment
  site_images: typeof site_images
  tipo_noticia: typeof tipo_noticia
  categoria_projeto: typeof categoria_projeto
  role: typeof role
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_news_content: typeof relations_news_content
  relations_news: typeof relations_news
  relations_projects_technologies: typeof relations_projects_technologies
  relations_projects_long_description: typeof relations_projects_long_description
  relations_projects_features: typeof relations_projects_features
  relations_projects_team: typeof relations_projects_team
  relations_projects: typeof relations_projects
  relations_team_skills: typeof relations_team_skills
  relations_team: typeof relations_team
  relations_equipment: typeof relations_equipment
  relations_site_images: typeof relations_site_images
  relations_tipo_noticia: typeof relations_tipo_noticia
  relations_categoria_projeto: typeof relations_categoria_projeto
  relations_role: typeof relations_role
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
